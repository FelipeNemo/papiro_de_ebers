"""
Sistema de Fine-tuning para Termos M√©dicos Brasileiros
Fase 4: Adapta√ß√£o do PubMedBERT para terminologia brasileira
"""

import torch
import torch.nn as nn
from torch.utils.data import Dataset, DataLoader
from sentence_transformers import SentenceTransformer, InputExample, losses
from sentence_transformers.evaluation import EmbeddingSimilarityEvaluator
import pandas as pd
import numpy as np
from typing import List, Dict, Tuple, Optional
import json
import os
from .config import EMBEDDING_MODEL

class BrazilianMedicalDataset(Dataset):
    """Dataset para fine-tuning com termos m√©dicos brasileiros"""
    
    def __init__(self, data_path: str = "data/brazilian_medical_terms.json"):
        """
        Inicializa dataset com termos m√©dicos brasileiros
        
        Args:
            data_path: Caminho para dados de treinamento
        """
        self.data_path = data_path
        self.examples = []
        self.load_data()
        
    def load_data(self):
        """Carrega dados de treinamento"""
        if os.path.exists(self.data_path):
            with open(self.data_path, 'r', encoding='utf-8') as f:
                data = json.load(f)
                self.examples = [InputExample(**example) for example in data]
        else:
            # Cria dados de exemplo se n√£o existir
            self.create_sample_data()
            
    def create_sample_data(self):
        """Cria dados de exemplo para fine-tuning"""
        sample_data = [
            # Termos cardiovasculares
            {"texts": ["dor no peito", "chest pain"], "label": 1.0},
            {"texts": ["infarto do mioc√°rdio", "myocardial infarction"], "label": 1.0},
            {"texts": ["hipertens√£o arterial", "arterial hypertension"], "label": 1.0},
            {"texts": ["insufici√™ncia card√≠aca", "heart failure"], "label": 1.0},
            {"texts": ["arritmia card√≠aca", "cardiac arrhythmia"], "label": 1.0},
            
            # Termos respirat√≥rios
            {"texts": ["falta de ar", "shortness of breath"], "label": 1.0},
            {"texts": ["pneumonia", "pneumonia"], "label": 1.0},
            {"texts": ["asma", "asthma"], "label": 1.0},
            {"texts": ["bronquite", "bronchitis"], "label": 1.0},
            {"texts": ["enfisema pulmonar", "pulmonary emphysema"], "label": 1.0},
            
            # Termos endocrinol√≥gicos
            {"texts": ["diabetes mellitus", "diabetes mellitus"], "label": 1.0},
            {"texts": ["diabetes tipo 1", "type 1 diabetes"], "label": 1.0},
            {"texts": ["diabetes tipo 2", "type 2 diabetes"], "label": 1.0},
            {"texts": ["hipoglicemia", "hypoglycemia"], "label": 1.0},
            {"texts": ["hiperglicemia", "hyperglycemia"], "label": 1.0},
            
            # Termos neurol√≥gicos
            {"texts": ["acidente vascular cerebral", "cerebrovascular accident"], "label": 1.0},
            {"texts": ["AVC", "stroke"], "label": 1.0},
            {"texts": ["epilepsia", "epilepsy"], "label": 1.0},
            {"texts": ["enxaqueca", "migraine"], "label": 1.0},
            {"texts": ["dem√™ncia", "dementia"], "label": 1.0},
            
            # Termos gastrointestinais
            {"texts": ["gastrite", "gastritis"], "label": 1.0},
            {"texts": ["√∫lcera g√°strica", "gastric ulcer"], "label": 1.0},
            {"texts": ["hepatite", "hepatitis"], "label": 1.0},
            {"texts": ["cirrose hep√°tica", "liver cirrhosis"], "label": 1.0},
            {"texts": ["pancreatite", "pancreatitis"], "label": 1.0},
            
            # Termos oncol√≥gicos
            {"texts": ["c√¢ncer", "cancer"], "label": 1.0},
            {"texts": ["tumor maligno", "malignant tumor"], "label": 1.0},
            {"texts": ["met√°stase", "metastasis"], "label": 1.0},
            {"texts": ["quimioterapia", "chemotherapy"], "label": 1.0},
            {"texts": ["radioterapia", "radiotherapy"], "label": 1.0},
            
            # Termos gerais
            {"texts": ["febre", "fever"], "label": 1.0},
            {"texts": ["dor de cabe√ßa", "headache"], "label": 1.0},
            {"texts": ["n√°usea", "nausea"], "label": 1.0},
            {"texts": ["v√¥mito", "vomiting"], "label": 1.0},
            {"texts": ["diarreia", "diarrhea"], "label": 1.0},
            
            # Exemplos de baixa similaridade
            {"texts": ["dor no peito", "diabetes mellitus"], "label": 0.1},
            {"texts": ["hipertens√£o", "pneumonia"], "label": 0.1},
            {"texts": ["asma", "gastrite"], "label": 0.1},
            {"texts": ["c√¢ncer", "febre"], "label": 0.2},
            {"texts": ["AVC", "diarreia"], "label": 0.1},
        ]
        
        # Salva dados de exemplo
        os.makedirs(os.path.dirname(self.data_path), exist_ok=True)
        with open(self.data_path, 'w', encoding='utf-8') as f:
            json.dump(sample_data, f, indent=2, ensure_ascii=False)
            
        self.examples = [InputExample(**example) for example in sample_data]
        print(f"üìä Dataset criado com {len(self.examples)} exemplos")
        
    def __len__(self):
        return len(self.examples)
        
    def __getitem__(self, idx):
        return self.examples[idx]

class BrazilianMedicalFineTuner:
    """Sistema de fine-tuning para termos m√©dicos brasileiros"""
    
    def __init__(self, model_name: str = None, device: str = None):
        """
        Inicializa sistema de fine-tuning
        
        Args:
            model_name: Nome do modelo base
            device: Dispositivo para treinamento
        """
        self.model_name = model_name or EMBEDDING_MODEL
        self.device = device or self._get_best_device()
        self.model = None
        self.dataset = None
        
        print(f"üî¨ Inicializando Fine-tuning para Termos Brasileiros")
        print(f"üéØ Modelo base: {self.model_name}")
        print(f"üíª Dispositivo: {self.device}")
        
    def _get_best_device(self) -> str:
        """Detecta melhor dispositivo"""
        if torch.cuda.is_available():
            return "cuda"
        return "cpu"
        
    def load_model(self):
        """Carrega modelo base"""
        print(f"üì• Carregando modelo: {self.model_name}")
        self.model = SentenceTransformer(self.model_name)
        
        if self.device == "cuda":
            self.model = self.model.to(self.device)
            print(f"‚úÖ Modelo movido para GPU: {torch.cuda.get_device_name(0)}")
        else:
            print("‚úÖ Modelo carregado na CPU")
            
    def prepare_dataset(self, data_path: str = "data/brazilian_medical_terms.json"):
        """Prepara dataset para treinamento"""
        print("üìä Preparando dataset...")
        self.dataset = BrazilianMedicalDataset(data_path)
        print(f"‚úÖ Dataset preparado: {len(self.dataset)} exemplos")
        
    def create_training_data(self, output_path: str = "data/brazilian_medical_terms.json"):
        """Cria dados de treinamento expandidos"""
        print("üî® Criando dados de treinamento expandidos...")
        
        # Dados expandidos com mais termos m√©dicos brasileiros
        expanded_data = [
            # Cardiologia
            {"texts": ["dor no peito", "chest pain"], "label": 1.0},
            {"texts": ["dor tor√°cica", "chest pain"], "label": 1.0},
            {"texts": ["angina", "angina"], "label": 1.0},
            {"texts": ["infarto agudo do mioc√°rdio", "acute myocardial infarction"], "label": 1.0},
            {"texts": ["IAM", "myocardial infarction"], "label": 1.0},
            {"texts": ["hipertens√£o arterial sist√™mica", "systemic arterial hypertension"], "label": 1.0},
            {"texts": ["press√£o alta", "high blood pressure"], "label": 1.0},
            {"texts": ["insufici√™ncia card√≠aca congestiva", "congestive heart failure"], "label": 1.0},
            {"texts": ["arritmia", "arrhythmia"], "label": 1.0},
            {"texts": ["fibrila√ß√£o atrial", "atrial fibrillation"], "label": 1.0},
            
            # Pneumologia
            {"texts": ["falta de ar", "shortness of breath"], "label": 1.0},
            {"texts": ["dispneia", "dyspnea"], "label": 1.0},
            {"texts": ["pneumonia adquirida na comunidade", "community-acquired pneumonia"], "label": 1.0},
            {"texts": ["asma br√¥nquica", "bronchial asthma"], "label": 1.0},
            {"texts": ["bronquite cr√¥nica", "chronic bronchitis"], "label": 1.0},
            {"texts": ["enfisema", "emphysema"], "label": 1.0},
            {"texts": ["DPOC", "COPD"], "label": 1.0},
            {"texts": ["tuberculose", "tuberculosis"], "label": 1.0},
            {"texts": ["c√¢ncer de pulm√£o", "lung cancer"], "label": 1.0},
            
            # Endocrinologia
            {"texts": ["diabetes mellitus tipo 1", "type 1 diabetes mellitus"], "label": 1.0},
            {"texts": ["diabetes mellitus tipo 2", "type 2 diabetes mellitus"], "label": 1.0},
            {"texts": ["diabetes descompensado", "uncontrolled diabetes"], "label": 1.0},
            {"texts": ["hipoglicemia", "hypoglycemia"], "label": 1.0},
            {"texts": ["hiperglicemia", "hyperglycemia"], "label": 1.0},
            {"texts": ["cetoacidose diab√©tica", "diabetic ketoacidosis"], "label": 1.0},
            {"texts": ["neuropatia diab√©tica", "diabetic neuropathy"], "label": 1.0},
            {"texts": ["retinopatia diab√©tica", "diabetic retinopathy"], "label": 1.0},
            {"texts": ["p√© diab√©tico", "diabetic foot"], "label": 1.0},
            
            # Neurologia
            {"texts": ["acidente vascular cerebral", "cerebrovascular accident"], "label": 1.0},
            {"texts": ["AVC isqu√™mico", "ischemic stroke"], "label": 1.0},
            {"texts": ["AVC hemorr√°gico", "hemorrhagic stroke"], "label": 1.0},
            {"texts": ["epilepsia", "epilepsy"], "label": 1.0},
            {"texts": ["convuls√£o", "seizure"], "label": 1.0},
            {"texts": ["enxaqueca", "migraine"], "label": 1.0},
            {"texts": ["cefaleia", "headache"], "label": 1.0},
            {"texts": ["dem√™ncia", "dementia"], "label": 1.0},
            {"texts": ["Alzheimer", "Alzheimer's disease"], "label": 1.0},
            {"texts": ["Parkinson", "Parkinson's disease"], "label": 1.0},
            
            # Gastroenterologia
            {"texts": ["gastrite", "gastritis"], "label": 1.0},
            {"texts": ["√∫lcera p√©ptica", "peptic ulcer"], "label": 1.0},
            {"texts": ["refluxo gastroesof√°gico", "gastroesophageal reflux"], "label": 1.0},
            {"texts": ["hepatite viral", "viral hepatitis"], "label": 1.0},
            {"texts": ["cirrose", "cirrhosis"], "label": 1.0},
            {"texts": ["pancreatite aguda", "acute pancreatitis"], "label": 1.0},
            {"texts": ["doen√ßa de Crohn", "Crohn's disease"], "label": 1.0},
            {"texts": ["colite ulcerativa", "ulcerative colitis"], "label": 1.0},
            {"texts": ["s√≠ndrome do intestino irrit√°vel", "irritable bowel syndrome"], "label": 1.0},
            
            # Oncologia
            {"texts": ["c√¢ncer", "cancer"], "label": 1.0},
            {"texts": ["neoplasia maligna", "malignant neoplasm"], "label": 1.0},
            {"texts": ["tumor", "tumor"], "label": 1.0},
            {"texts": ["met√°stase", "metastasis"], "label": 1.0},
            {"texts": ["quimioterapia", "chemotherapy"], "label": 1.0},
            {"texts": ["radioterapia", "radiotherapy"], "label": 1.0},
            {"texts": ["imunoterapia", "immunotherapy"], "label": 1.0},
            {"texts": ["c√¢ncer de mama", "breast cancer"], "label": 1.0},
            {"texts": ["c√¢ncer de pr√≥stata", "prostate cancer"], "label": 1.0},
            {"texts": ["c√¢ncer de c√≥lon", "colon cancer"], "label": 1.0},
            
            # Sintomas gerais
            {"texts": ["febre", "fever"], "label": 1.0},
            {"texts": ["hipertermia", "hyperthermia"], "label": 1.0},
            {"texts": ["dor de cabe√ßa", "headache"], "label": 1.0},
            {"texts": ["cefaleia", "headache"], "label": 1.0},
            {"texts": ["n√°usea", "nausea"], "label": 1.0},
            {"texts": ["v√¥mito", "vomiting"], "label": 1.0},
            {"texts": ["diarreia", "diarrhea"], "label": 1.0},
            {"texts": ["constipa√ß√£o", "constipation"], "label": 1.0},
            {"texts": ["fadiga", "fatigue"], "label": 1.0},
            {"texts": ["astenia", "asthenia"], "label": 1.0},
            
            # Exemplos de baixa similaridade
            {"texts": ["dor no peito", "diabetes"], "label": 0.1},
            {"texts": ["hipertens√£o", "pneumonia"], "label": 0.1},
            {"texts": ["asma", "gastrite"], "label": 0.1},
            {"texts": ["c√¢ncer", "febre"], "label": 0.2},
            {"texts": ["AVC", "diarreia"], "label": 0.1},
            {"texts": ["epilepsia", "hipertens√£o"], "label": 0.1},
            {"texts": ["pneumonia", "gastrite"], "label": 0.1},
            {"texts": ["diabetes", "asma"], "label": 0.1},
        ]
        
        # Salva dados expandidos
        os.makedirs(os.path.dirname(output_path), exist_ok=True)
        with open(output_path, 'w', encoding='utf-8') as f:
            json.dump(expanded_data, f, indent=2, ensure_ascii=False)
            
        print(f"‚úÖ Dados de treinamento criados: {len(expanded_data)} exemplos")
        
    def fine_tune(self, epochs: int = 3, batch_size: int = 16, 
                  output_path: str = "models/brazilian_pubmedbert"):
        """
        Executa fine-tuning do modelo
        
        Args:
            epochs: N√∫mero de √©pocas
            batch_size: Tamanho do lote
            output_path: Caminho para salvar modelo
        """
        if self.model is None:
            self.load_model()
            
        if self.dataset is None:
            self.prepare_dataset()
            
        print(f"üöÄ Iniciando fine-tuning...")
        print(f"   üìä √âpocas: {epochs}")
        print(f"   üì¶ Batch size: {batch_size}")
        print(f"   üíæ Sa√≠da: {output_path}")
        
        # Prepara dados de treinamento
        train_examples = self.dataset.examples
        
        # Divide em treino e valida√ß√£o
        split_idx = int(0.8 * len(train_examples))
        train_data = train_examples[:split_idx]
        val_data = train_examples[split_idx:]
        
        print(f"   üìä Treino: {len(train_data)} exemplos")
        print(f"   üìä Valida√ß√£o: {len(val_data)} exemplos")
        
        # Configura loss function
        train_loss = losses.CosineSimilarityLoss(self.model)
        
        # Configura evaluator
        evaluator = EmbeddingSimilarityEvaluator.from_input_examples(
            val_data, name='brazilian_medical_eval'
        )
        
        # Executa fine-tuning
        self.model.fit(
            train_objectives=[(train_data, train_loss)],
            evaluator=evaluator,
            epochs=epochs,
            evaluation_steps=100,
            warmup_steps=100,
            output_path=output_path,
            save_best_model=True,
            show_progress_bar=True
        )
        
        print(f"‚úÖ Fine-tuning conclu√≠do!")
        print(f"üíæ Modelo salvo em: {output_path}")
        
    def evaluate_model(self, test_data_path: str = None) -> Dict:
        """
        Avalia modelo fine-tuned
        
        Args:
            test_data_path: Caminho para dados de teste
            
        Returns:
            M√©tricas de avalia√ß√£o
        """
        if test_data_path and os.path.exists(test_data_path):
            test_dataset = BrazilianMedicalDataset(test_data_path)
        else:
            test_dataset = self.dataset
            
        print("üß™ Avaliando modelo fine-tuned...")
        
        # Testa similaridade em pares conhecidos
        test_pairs = [
            ("dor no peito", "chest pain"),
            ("infarto do mioc√°rdio", "myocardial infarction"),
            ("hipertens√£o arterial", "arterial hypertension"),
            ("falta de ar", "shortness of breath"),
            ("diabetes mellitus", "diabetes mellitus"),
            ("pneumonia", "pneumonia"),
            ("asma", "asthma"),
            ("gastrite", "gastritis"),
            ("hepatite", "hepatitis"),
            ("c√¢ncer", "cancer")
        ]
        
        similarities = []
        for pt_term, en_term in test_pairs:
            # Gera embeddings
            pt_embedding = self.model.encode([pt_term])
            en_embedding = self.model.encode([en_term])
            
            # Calcula similaridade
            similarity = torch.cosine_similarity(
                torch.tensor(pt_embedding), 
                torch.tensor(en_embedding)
            ).item()
            
            similarities.append(similarity)
            print(f"   {pt_term} ‚Üî {en_term}: {similarity:.3f}")
        
        avg_similarity = np.mean(similarities)
        print(f"\nüìä Similaridade m√©dia: {avg_similarity:.3f}")
        
        return {
            "average_similarity": avg_similarity,
            "similarities": similarities,
            "test_pairs": test_pairs
        }
        
    def save_model(self, output_path: str = "models/brazilian_pubmedbert"):
        """Salva modelo fine-tuned"""
        if self.model is None:
            print("‚ùå Modelo n√£o carregado")
            return
            
        os.makedirs(output_path, exist_ok=True)
        self.model.save(output_path)
        print(f"üíæ Modelo salvo em: {output_path}")
        
    def load_fine_tuned_model(self, model_path: str = "models/brazilian_pubmedbert"):
        """Carrega modelo fine-tuned"""
        if os.path.exists(model_path):
            self.model = SentenceTransformer(model_path)
            if self.device == "cuda":
                self.model = self.model.to(self.device)
            print(f"‚úÖ Modelo fine-tuned carregado: {model_path}")
            return True
        else:
            print(f"‚ùå Modelo n√£o encontrado: {model_path}")
            return False
